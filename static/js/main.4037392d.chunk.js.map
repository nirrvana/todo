{"version":3,"sources":["redux/action.js","redux/api.js","redux/reducer.js","helper.js","component/GroupEntry.js","component/GroupList.js","component/TodoEntry.js","component/TodoList.js","App.js","index.js"],"names":["Action","getGroupList","type","selectGroup","index","addGroup","name","deleteGroup","updateGroup","renameGroup","addTodo","content","deleteTodo","updateTodo","submitTodo","completeTodo","incompleteTodo","Api","groupList","groupListData","JSON","parse","localStorage","getItem","Array","isArray","stringify","defaultGroupList","todoList","completed","setItem","newGroup","oldGroupList","newGroupList","groupIndex","filter","_group","map","group","selectedGroupIndex","newTodo","todoIndex","_todo","todo","initialState","groupListForEdit","reducer","state","action","isEmpty","target","test","GroupEntry","isEditMode","isRenameMode","groupNameArea","React","createRef","updateGroupName","value","props","dispatchUpdateGroup","submitGroupName","groupNameForEdit","key","dispatchRenameGroup","setState","renderGroupName","groupName","dispatchSelectGroup","ref","className","onClick","renderGroupDeleteButton","dispatchDeleteGroup","Button","size","variant","renderGroupRenameButton","renderGroupNameInput","InputGroup","Form","Control","autoFocus","onChange","onKeyDown","Append","this","Container","fluid","onMouseEnter","onMouseLeave","Row","noGutters","Col","Component","connect","dispatch","GroupList","isAddMode","groupListContainer","dispatchAddGroup","hideGroupNameInput","current","contains","placeholder","window","addEventListener","removeEventListener","ListGroup","Item","TodoEntry","isUpdateMode","isShowMode","updateTodoContent","dispatchUpdateTodo","showAlert","Modal","show","Header","Title","Body","Footer","submitTodoContent","dispatchSubmitTodo","renderTodo","dispatchCompleteTodo","checked","renderDeleteTodoButton","renderCompletedTodo","dispatchIncompleteTodo","dispatchDeleteTodo","renderTodoInput","todoContentForEdit","renderTodoOrInput","TodoList","isSpreadMode","todoListContainer","dispatchAddTodo","hideTodoInput","renderListOrInput","length","Alert","renderCompletedTodoSpreadButton","disabled","countCompletedTodo","completedTodoCount","App","renderTodoList","dispatchGetGroupList","xl","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4037392d.chunk.js","sourcesContent":["export const GET_GROUP_LIST = 'GET_GROUP_LIST';\nexport const SELECT_GROUP = 'SELECT_GROUP';\nexport const ADD_GROUP = 'ADD_GROUP';\nexport const DELETE_GROUP = 'DELETE_GROUP';\nexport const UPDATE_GROUP = 'UPDATE_GROUP';\nexport const RENAME_GROUP = 'RENAME_GROUP';\nexport const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const UPDATE_TODO = 'UPDATE_TODO';\nexport const SUBMIT_TODO = 'SUBMIT_TODO';\nexport const COMPLETE_TODO = 'COMPLETE_TODO';\nexport const INCOMPLETE_TODO = 'INCOMPLETE_TODO';\n\nexport default class Action {\n  static getGroupList = () => ({\n    type: GET_GROUP_LIST,\n  });\n\n  static selectGroup = (index) => ({\n    type: SELECT_GROUP,\n    index,\n  });\n\n  static addGroup = (name) => ({\n    type: ADD_GROUP,\n    name,\n  });\n\n  static deleteGroup = (index) => ({\n    type: DELETE_GROUP,\n    index,\n  });\n\n  static updateGroup = (index, name) => ({\n    type: UPDATE_GROUP,\n    index,\n    name,\n  });\n\n  static renameGroup = (index, name) => ({\n    type: RENAME_GROUP,\n    index,\n    name,\n  });\n\n  static addTodo = (content) => ({\n    type: ADD_TODO,\n    content,\n  });\n\n  static deleteTodo = (index) => ({\n    type: DELETE_TODO,\n    index,\n  });\n\n  static updateTodo = (index, content) => ({\n    type: UPDATE_TODO,\n    index,\n    content,\n  });\n\n  static submitTodo = (index, content) => ({\n    type: SUBMIT_TODO,\n    index,\n    content,\n  });\n\n  static completeTodo = (index) => ({\n    type: COMPLETE_TODO,\n    index,\n  });\n\n  static incompleteTodo = (index) => ({\n    type: INCOMPLETE_TODO,\n    index,\n  });\n}\n","export default class Api {\n  static getGroupList = () => {\n    let groupList;\n    const groupListData = JSON.parse(localStorage.getItem('groupList'));\n\n    if (Array.isArray(groupListData)) {\n      groupList = JSON.stringify(groupListData);\n    } else {\n      const defaultGroupList = JSON.stringify([\n        {\n          name: 'Untitled',\n          todoList: [\n            { content: 'todo1', completed: false },\n            { content: 'todo2', completed: true },\n          ],\n        },\n      ]);\n      localStorage.setItem('groupList', defaultGroupList);\n      groupList = defaultGroupList;\n    }\n    return groupList;\n  };\n\n  static addGroup = (name) => {\n    const newGroup = { name, todoList: [] };\n    const oldGroupList = JSON.parse(localStorage.getItem('groupList'));\n    const newGroupList = JSON.stringify(\n      Array.isArray(oldGroupList) ? [...oldGroupList, newGroup] : [newGroup],\n    );\n    localStorage.setItem('groupList', newGroupList);\n    return newGroupList;\n  };\n\n  static deleteGroup = (groupIndex) => {\n    const oldGroupList = JSON.parse(localStorage.getItem('groupList'));\n    const newGroupList = JSON.stringify(\n      oldGroupList.filter((_group, index) => index !== groupIndex),\n    );\n\n    localStorage.setItem('groupList', newGroupList);\n    return newGroupList;\n  };\n\n  static renameGroup = (groupIndex, name) => {\n    const oldGroupList = JSON.parse(localStorage.getItem('groupList'));\n    const newGroupList = JSON.stringify(\n      oldGroupList.map((group, index) =>\n        index === groupIndex ? { ...group, name } : group,\n      ),\n    );\n\n    localStorage.setItem('groupList', newGroupList);\n    return newGroupList;\n  };\n\n  static addTodo = (selectedGroupIndex, content) => {\n    const newTodo = { content, completed: false };\n    const oldGroupList = JSON.parse(localStorage.getItem('groupList'));\n    const newGroupList = JSON.stringify(\n      oldGroupList.map((group, index) =>\n        index === selectedGroupIndex\n          ? {\n              ...group,\n              todoList: [...group.todoList, newTodo],\n            }\n          : group,\n      ),\n    );\n\n    localStorage.setItem('groupList', newGroupList);\n    return newGroupList;\n  };\n\n  static deleteTodo = (selectedGroupIndex, todoIndex) => {\n    const oldGroupList = JSON.parse(localStorage.getItem('groupList'));\n    const newGroupList = JSON.stringify(\n      oldGroupList.map((group, index) =>\n        index === selectedGroupIndex\n          ? {\n              ...group,\n              todoList: group.todoList.filter(\n                (_todo, index) => index !== todoIndex,\n              ),\n            }\n          : group,\n      ),\n    );\n\n    localStorage.setItem('groupList', newGroupList);\n    return newGroupList;\n  };\n\n  static submitTodo = (selectedGroupIndex, todoIndex, content) => {\n    const oldGroupList = JSON.parse(localStorage.getItem('groupList'));\n    const newGroupList = JSON.stringify(\n      oldGroupList.map((group, index) =>\n        index === selectedGroupIndex\n          ? {\n              ...group,\n              todoList: group.todoList.map((todo, index) =>\n                index === todoIndex ? { ...todo, content } : todo,\n              ),\n            }\n          : group,\n      ),\n    );\n\n    localStorage.setItem('groupList', newGroupList);\n    return newGroupList;\n  };\n\n  static completeTodo = (selectedGroupIndex, todoIndex) => {\n    const oldGroupList = JSON.parse(localStorage.getItem('groupList'));\n    const newGroupList = JSON.stringify(\n      oldGroupList.map((group, index) =>\n        index === selectedGroupIndex\n          ? {\n              ...group,\n              todoList: group.todoList.map((todo, index) =>\n                index === todoIndex ? { ...todo, completed: true } : todo,\n              ),\n            }\n          : group,\n      ),\n    );\n\n    localStorage.setItem('groupList', newGroupList);\n    return newGroupList;\n  };\n\n  static incompleteTodo = (selectedGroupIndex, todoIndex) => {\n    const oldGroupList = JSON.parse(localStorage.getItem('groupList'));\n    const newGroupList = JSON.stringify(\n      oldGroupList.map((group, index) =>\n        index === selectedGroupIndex\n          ? {\n              ...group,\n              todoList: group.todoList.map((todo, index) =>\n                index === todoIndex ? { ...todo, completed: false } : todo,\n              ),\n            }\n          : group,\n      ),\n    );\n\n    localStorage.setItem('groupList', newGroupList);\n    return newGroupList;\n  };\n}\n","import {\n  GET_GROUP_LIST,\n  SELECT_GROUP,\n  ADD_GROUP,\n  DELETE_GROUP,\n  UPDATE_GROUP,\n  RENAME_GROUP,\n  ADD_TODO,\n  DELETE_TODO,\n  UPDATE_TODO,\n  SUBMIT_TODO,\n  COMPLETE_TODO,\n  INCOMPLETE_TODO,\n} from './action';\n\nimport Api from './api';\n\nconst initialState = {\n  groupList: [],\n  groupListForEdit: [],\n  selectedGroupIndex: null,\n};\n\nconst reducer = (state = initialState, action) => {\n  let { groupListForEdit, selectedGroupIndex } = state;\n  let groupListData = [];\n\n  switch (action.type) {\n    case GET_GROUP_LIST:\n      groupListData = JSON.parse(Api.getGroupList());\n      return {\n        ...state,\n        groupList: [...groupListData],\n        groupListForEdit: [...groupListData],\n      };\n    case SELECT_GROUP:\n      return {\n        ...state,\n        selectedGroupIndex: action.index,\n      };\n    case ADD_GROUP:\n      groupListData = JSON.parse(Api.addGroup(action.name));\n      return {\n        ...state,\n        groupList: [...groupListData],\n        groupListForEdit: [...groupListData],\n      };\n    case DELETE_GROUP:\n      groupListData = JSON.parse(Api.deleteGroup(action.index));\n      return {\n        groupList: [...groupListData],\n        groupListForEdit: [...groupListData],\n        selectedGroupIndex:\n          selectedGroupIndex === action.index\n            ? null\n            : selectedGroupIndex > action.index\n            ? selectedGroupIndex - 1\n            : selectedGroupIndex,\n      };\n    case UPDATE_GROUP:\n      return {\n        ...state,\n        groupListForEdit: groupListForEdit.map((group, index) =>\n          index === action.index ? { ...group, name: action.name } : group,\n        ),\n      };\n    case RENAME_GROUP:\n      groupListData = JSON.parse(Api.renameGroup(action.index, action.name));\n      return {\n        ...state,\n        groupList: [...groupListData],\n        groupListForEdit: [...groupListData],\n      };\n    case ADD_TODO:\n      groupListData = JSON.parse(\n        Api.addTodo(selectedGroupIndex, action.content),\n      );\n      return {\n        ...state,\n        groupList: [...groupListData],\n        groupListForEdit: [...groupListData],\n      };\n    case DELETE_TODO:\n      groupListData = JSON.parse(\n        Api.deleteTodo(selectedGroupIndex, action.index),\n      );\n      return {\n        ...state,\n        groupList: [...groupListData],\n        groupListForEdit: [...groupListData],\n      };\n    case UPDATE_TODO:\n      return {\n        ...state,\n        groupListForEdit: groupListForEdit.map((group, index) =>\n          index === selectedGroupIndex\n            ? {\n                ...group,\n                todoList: group.todoList.map((todo, index) =>\n                  index === action.index\n                    ? { ...todo, content: action.content }\n                    : todo,\n                ),\n              }\n            : group,\n        ),\n      };\n    case SUBMIT_TODO:\n      groupListData = JSON.parse(\n        Api.submitTodo(selectedGroupIndex, action.index, action.content),\n      );\n      return {\n        ...state,\n        groupList: [...groupListData],\n        groupListForEdit: [...groupListData],\n      };\n    case COMPLETE_TODO:\n      groupListData = JSON.parse(\n        Api.completeTodo(selectedGroupIndex, action.index),\n      );\n      return {\n        ...state,\n        groupList: [...groupListData],\n        groupListForEdit: [...groupListData],\n      };\n\n    case INCOMPLETE_TODO:\n      groupListData = JSON.parse(\n        Api.incompleteTodo(selectedGroupIndex, action.index),\n      );\n      return {\n        ...state,\n        groupList: [...groupListData],\n        groupListForEdit: [...groupListData],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const isEmpty = (target) => !/\\S/.test(target);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Action from '../redux/action';\nimport { Container, Row, Col, Button, Form, InputGroup } from 'react-bootstrap';\nimport { BsCheck as CheckIcon } from 'react-icons/bs';\nimport '../css/GroupEntry.css';\nimport { isEmpty } from '../helper';\n\nclass GroupEntry extends Component {\n  state = {\n    isEditMode: false,\n    isRenameMode: false,\n  };\n\n  groupNameArea = React.createRef();\n\n  updateGroupName = ({ target: { value: name } }) => {\n    const { index, dispatchUpdateGroup } = this.props;\n    dispatchUpdateGroup(index, name);\n  };\n\n  submitGroupName = (groupNameForEdit) => ({ key, type }) => {\n    const { index, dispatchRenameGroup } = this.props;\n\n    if (key === 'Enter' || type === 'click') {\n      const groupName = isEmpty(groupNameForEdit)\n        ? 'Untitled'\n        : groupNameForEdit;\n      dispatchRenameGroup(index, groupName);\n      this.setState({ isRenameMode: false });\n    }\n  };\n\n  renderGroupName = (isRenameMode) => {\n    const { index, groupName, dispatchSelectGroup } = this.props;\n\n    if (!isRenameMode) {\n      return (\n        <div\n          ref={this.groupNameArea}\n          className=\"group-entry-container__name\"\n          onClick={() => dispatchSelectGroup(index)}\n        >\n          {groupName}\n        </div>\n      );\n    }\n  };\n\n  renderGroupDeleteButton = (isEditMode, isRenameMode) => {\n    const { index, dispatchDeleteGroup } = this.props;\n\n    if (isEditMode && !isRenameMode) {\n      return (\n        <Button\n          size=\"sm\"\n          variant=\"outline-danger\"\n          className=\"group-entry-container__delete-button\"\n          onClick={() => dispatchDeleteGroup(index)}\n        >\n          X\n        </Button>\n      );\n    }\n  };\n\n  renderGroupRenameButton = (isEditMode, isRenameMode) => {\n    if (isEditMode && !isRenameMode) {\n      return (\n        <Button\n          size=\"sm\"\n          variant=\"outline-success\"\n          className=\"group-entry-container__rename-button\"\n          onClick={() => this.setState({ isRenameMode: true })}\n        >\n          rename\n        </Button>\n      );\n    }\n  };\n\n  renderGroupNameInput = () => {\n    const { groupListForEdit } = this.props;\n    const groupNameForEdit = groupListForEdit.filter(\n      (_group, index) => index === this.props.index,\n    )[0].name;\n\n    return (\n      <InputGroup className=\"mb-3\">\n        <Form.Control\n          autoFocus\n          value={groupNameForEdit}\n          onChange={this.updateGroupName}\n          onKeyDown={this.submitGroupName(groupNameForEdit)}\n        />\n        <InputGroup.Append>\n          <Button\n            size=\"sm\"\n            variant=\"outline-info\"\n            onClick={this.submitGroupName(groupNameForEdit)}\n          >\n            <CheckIcon />\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n    );\n  };\n\n  render() {\n    const { isEditMode, isRenameMode } = this.state;\n\n    if (isRenameMode) {\n      return this.renderGroupNameInput();\n    } else {\n      return (\n        <Container\n          fluid\n          className=\"group-entry-container\"\n          onMouseEnter={() => this.setState({ isEditMode: true })}\n          onMouseLeave={() => this.setState({ isEditMode: false })}\n        >\n          <Row noGutters={true} className=\"group-entry-container__wrapper\">\n            <Col className=\"group-entry-container__name-area\">\n              {this.renderGroupName(isRenameMode)}\n            </Col>\n            <Col className=\"group-entry-container__delete-button-area\">\n              {this.renderGroupDeleteButton(isEditMode, isRenameMode)}\n            </Col>\n            <Col className=\"group-entry-container__rename-button-area\">\n              {this.renderGroupRenameButton(isEditMode, isRenameMode)}\n            </Col>\n          </Row>\n        </Container>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = ({ groupListForEdit }) => ({\n  groupListForEdit,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchSelectGroup: (index) => dispatch(Action.selectGroup(index)),\n  dispatchDeleteGroup: (index) => dispatch(Action.deleteGroup(index)),\n  dispatchUpdateGroup: (index, name) =>\n    dispatch(Action.updateGroup(index, name)),\n  dispatchRenameGroup: (index, name) =>\n    dispatch(Action.renameGroup(index, name)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupEntry);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Action from '../redux/action';\nimport GroupEntry from './GroupEntry';\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Form,\n  ListGroup,\n  InputGroup,\n} from 'react-bootstrap';\nimport { BsCheck as CheckIcon } from 'react-icons/bs';\nimport '../css/GroupList.css';\nimport { isEmpty } from '../helper';\n\nclass GroupList extends Component {\n  state = {\n    name: '',\n    isAddMode: false,\n  };\n\n  groupListContainer = React.createRef();\n\n  componentDidMount() {\n    window.addEventListener('click', this.hideGroupNameInput);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', this.hideGroupNameInput);\n  }\n\n  submitGroupName = (groupName) => ({ key, type }) => {\n    if (key === 'Enter' || type === 'click') {\n      const name = isEmpty(groupName) ? 'Untitled' : groupName;\n      this.props.dispatchAddGroup(name);\n      this.setState({ isAddMode: false, name: '' });\n    }\n  };\n\n  hideGroupNameInput = ({ target }) => {\n    if (\n      this.state.isAddMode &&\n      !this.groupListContainer.current.contains(target)\n    ) {\n      this.setState({ isAddMode: false });\n    }\n  };\n\n  renderGroupNameInput = (isAddMode) => {\n    const { name } = this.state;\n\n    if (isAddMode) {\n      return (\n        <Col className=\"group-list-container__input-group-area\">\n          <InputGroup className=\"mb-3\">\n            <Form.Control\n              autoFocus\n              placeholder=\"group name\"\n              className=\"group-list-container__form-control\"\n              onChange={({ target: { value: name } }) =>\n                this.setState({ name })\n              }\n              onKeyDown={this.submitGroupName(name)}\n              onClick={this.hideGroupNameInput}\n            />\n            <InputGroup.Append>\n              <Button\n                variant=\"outline-info\"\n                className=\"group-list-container__check-button\"\n                onClick={this.submitGroupName(name)}\n              >\n                <CheckIcon />\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Col>\n      );\n    }\n  };\n\n  render() {\n    const {\n      props: { groupList },\n      state: { isAddMode },\n    } = this;\n\n    return (\n      <Container\n        fluid\n        className=\"group-list-container\"\n        ref={this.groupListContainer}\n      >\n        <Row noGutters={true} className=\"group-list-container__wrapper\">\n          <Button\n            variant=\"outline-danger\"\n            className=\"group-list-container__add-button\"\n            onClick={() => this.setState({ isAddMode: !isAddMode })}\n          >\n            {isAddMode ? 'End' : '+ Add Group'}\n          </Button>\n        </Row>\n        <Row noGutters={true} className=\"group-list-container__wrapper\">\n          {this.renderGroupNameInput(isAddMode)}\n        </Row>\n        <Row noGutters={true} className=\"group-list-container__wrapper\">\n          <Col className=\"group-list-container__group-entry-area\">\n            <ListGroup>\n              {groupList.map((group, index) => (\n                <ListGroup.Item className=\"group-list-container__list-group-item\">\n                  <GroupEntry\n                    key={index}\n                    index={index}\n                    groupName={group.name}\n                  />\n                </ListGroup.Item>\n              ))}\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = ({ groupList, selectedGroupIndex }) => ({\n  groupList,\n  selectedGroupIndex,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchAddGroup: (name) => dispatch(Action.addGroup(name)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Action from '../redux/action';\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Form,\n  InputGroup,\n  Modal,\n} from 'react-bootstrap';\nimport { BsCheck as CheckIcon } from 'react-icons/bs';\nimport '../css/TodoEntry.css';\nimport { isEmpty } from '../helper';\n\nclass TodoEntry extends Component {\n  state = {\n    isEditMode: false,\n    isUpdateMode: false,\n    isShowMode: false,\n  };\n\n  updateTodoContent = ({ target: { value: content } }) => {\n    const { index, dispatchUpdateTodo } = this.props;\n    dispatchUpdateTodo(index, content);\n  };\n\n  showAlert = () => {\n    return (\n      <Modal show={this.state.isShowMode}>\n        <Modal.Header>\n          <Modal.Title>Empty content..</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Please enter the content.</Modal.Body>\n        <Modal.Footer>\n          <Button\n            variant=\"outline-info\"\n            onClick={() => this.setState({ isShowMode: false })}\n          >\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  };\n\n  submitTodoContent = (content) => ({ key, type }) => {\n    if (key === 'Enter' || type === 'click') {\n      if (isEmpty(content)) {\n        this.setState({ isShowMode: true });\n      } else {\n        this.props.dispatchSubmitTodo(this.props.index, content);\n        this.setState({ isUpdateMode: false });\n      }\n    }\n  };\n\n  renderTodo = () => {\n    const { index: todoIndex, todo, dispatchCompleteTodo } = this.props;\n\n    return (\n      <Row\n        noGutters={true}\n        className=\"todo-entry-container__wrapper flex-nowrap\"\n      >\n        <Col className=\"todo-entry-container__check-box-area\">\n          <input\n            className=\"todo-entry-container__check-box\"\n            type=\"checkbox\"\n            checked={todo.completed}\n            onChange={() => dispatchCompleteTodo(todoIndex)}\n          />\n        </Col>\n        <Col className=\"todo-entry-container__content-area\">\n          <div\n            className=\"todo-entry-container__content\"\n            onClick={() => this.setState({ isUpdateMode: true })}\n          >\n            {todo.content}\n          </div>\n        </Col>\n        <Col className=\"todo-entry-container__delete-button-area\">\n          {this.renderDeleteTodoButton()}\n        </Col>\n      </Row>\n    );\n  };\n\n  renderCompletedTodo = () => {\n    const { index: todoIndex, todo, dispatchIncompleteTodo } = this.props;\n\n    return (\n      <Row\n        noGutters={true}\n        className=\"todo-entry-container__wrapper flex-nowrap\"\n      >\n        <Col className=\"todo-entry-container__check-box-area\">\n          <input\n            className=\"todo-entry-container__check-box\"\n            type=\"checkbox\"\n            checked={todo.completed}\n            onChange={() => dispatchIncompleteTodo(todoIndex)}\n          />\n        </Col>\n        <Col className=\"todo-entry-container__completed-content-area\">\n          <div className=\"todo-entry-container__completed-content\">\n            {todo.content}\n          </div>\n        </Col>\n        <Col className=\"todo-entry-container__delete-button-area\">\n          {this.renderDeleteTodoButton()}\n        </Col>\n      </Row>\n    );\n  };\n\n  renderDeleteTodoButton = () => {\n    const {\n      state: { isEditMode, isUpdateMode },\n      props: { index, dispatchDeleteTodo },\n    } = this;\n\n    if (isEditMode && !isUpdateMode) {\n      return (\n        <Button\n          size=\"sm\"\n          variant=\"outline-danger\"\n          className=\"todo-entry-container__delete-button\"\n          onClick={() => dispatchDeleteTodo(index)}\n        >\n          X\n        </Button>\n      );\n    }\n  };\n\n  renderTodoInput = () => {\n    const {\n      index: todoIndex,\n      groupListForEdit,\n      selectedGroupIndex,\n    } = this.props;\n    const selectedGroupForEdit = groupListForEdit.filter(\n      (_group, index) => index === selectedGroupIndex,\n    )[0];\n    const todoContentForEdit = selectedGroupForEdit.todoList[todoIndex].content;\n\n    return (\n      <Row noGutters={true} className=\"todo-entry-container__wrapper\">\n        <Col className=\"todo-entry-container__input-group-area\">\n          <InputGroup className=\"mb-3 todo-entry-container__input-group\">\n            <Form.Control\n              autoFocus\n              className=\"todo-entry-container__form-control\"\n              value={todoContentForEdit}\n              onChange={this.updateTodoContent}\n              onKeyDown={this.submitTodoContent(todoContentForEdit)}\n            />\n            <InputGroup.Append>\n              <Button\n                size=\"sm\"\n                variant=\"outline-info\"\n                onClick={this.submitTodoContent(todoContentForEdit)}\n              >\n                <CheckIcon />\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Col>\n      </Row>\n    );\n  };\n\n  renderTodoOrInput = () => {\n    const { todo } = this.props;\n    const { isUpdateMode } = this.state;\n\n    if (isUpdateMode) {\n      return this.renderTodoInput();\n    } else {\n      if (todo.completed) {\n        return this.renderCompletedTodo();\n      } else {\n        return this.renderTodo();\n      }\n    }\n  };\n\n  render() {\n    return (\n      <Container\n        fluid\n        className=\"todo-entry-container\"\n        onMouseEnter={() => this.setState({ isEditMode: true })}\n        onMouseLeave={() => this.setState({ isEditMode: false })}\n      >\n        {this.renderTodoOrInput()}\n        {this.showAlert()}\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  groupList,\n  groupListForEdit,\n  selectedGroupIndex,\n}) => ({\n  groupList,\n  groupListForEdit,\n  selectedGroupIndex,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchDeleteTodo: (index) => dispatch(Action.deleteTodo(index)),\n  dispatchUpdateTodo: (index, content) =>\n    dispatch(Action.updateTodo(index, content)),\n  dispatchSubmitTodo: (index, content) =>\n    dispatch(Action.submitTodo(index, content)),\n  dispatchCompleteTodo: (index) => dispatch(Action.completeTodo(index)),\n  dispatchIncompleteTodo: (index) => dispatch(Action.incompleteTodo(index)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoEntry);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Action from '../redux/action';\nimport TodoEntry from './TodoEntry';\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  ListGroup,\n  Form,\n  InputGroup,\n  Modal,\n  Alert,\n} from 'react-bootstrap';\nimport {\n  BsFillCaretRightFill as OpenCompletedTodoIcon,\n  BsFillCaretDownFill as CloseCompletedTodoIcon,\n  BsInfoCircle as InfoIcon,\n  BsCheck as CheckIcon,\n} from 'react-icons/bs';\nimport '../css/TodoList.css';\nimport { isEmpty } from '../helper';\n\nclass TodoList extends Component {\n  state = {\n    content: '',\n    isAddMode: false,\n    isShowMode: false,\n    isSpreadMode: true,\n  };\n\n  todoListContainer = React.createRef();\n\n  componentDidMount() {\n    window.addEventListener('click', this.hideTodoInput);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', this.hideTodoInput);\n  }\n\n  showAlert = () => {\n    return (\n      <Modal show={this.state.isShowMode}>\n        <Modal.Header>\n          <Modal.Title>Empty content..</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Please enter the content.</Modal.Body>\n        <Modal.Footer>\n          <Button\n            variant=\"outline-info\"\n            onClick={() => this.setState({ isShowMode: false })}\n          >\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  };\n\n  submitTodo = (content) => ({ key, type }) => {\n    if (key === 'Enter' || type === 'click') {\n      if (isEmpty(content)) {\n        this.setState({ isShowMode: true });\n      } else {\n        this.props.dispatchAddTodo(content);\n        this.setState({ isAddMode: false, content: '' });\n      }\n    }\n  };\n\n  hideTodoInput = ({ target }) => {\n    if (\n      this.state.isAddMode &&\n      !this.todoListContainer.current.contains(target)\n    ) {\n      this.setState({ isAddMode: false });\n    }\n  };\n\n  renderTodoInput = () => {\n    const { isAddMode, content } = this.state;\n\n    if (isAddMode) {\n      return (\n        <ListGroup.Item className=\"todo-list-container__list-group-item\">\n          <InputGroup className=\"mb-3 todo-list-container__input-group\">\n            <Form.Control\n              autoFocus\n              className=\"todo-list-container__form-control\"\n              placeholder=\"todo\"\n              onChange={({ target: { value: content } }) =>\n                this.setState({ content })\n              }\n              onKeyDown={this.submitTodo(content)}\n              onClick={this.hideTodoInput}\n            />\n            <InputGroup.Append>\n              <Button\n                size=\"sm\"\n                variant=\"outline-info\"\n                onClick={this.submitTodo(content)}\n              >\n                <CheckIcon />\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </ListGroup.Item>\n      );\n    }\n  };\n\n  renderListOrInput = (todoList) => {\n    if (todoList.length === 0) {\n      return (\n        <Col>\n          <Alert className=\"todo-list-container__alert\">\n            <InfoIcon className=\"todo-list-container__info-icon\" />\n            List is empty.\n          </Alert>\n          {this.renderTodoInput()}\n        </Col>\n      );\n    } else {\n      return (\n        <Col>\n          <ListGroup>\n            {todoList.map((todo, index) =>\n              todo.completed ? null : (\n                <ListGroup.Item className=\"todo-list-container__list-group-item\">\n                  <TodoEntry key={index} index={index} todo={todo} />\n                </ListGroup.Item>\n              ),\n            )}\n            {this.renderTodoInput()}\n          </ListGroup>\n        </Col>\n      );\n    }\n  };\n\n  renderCompletedTodoSpreadButton = (todoList, isSpreadMode) => {\n    if (todoList.length > 0)\n      return (\n        <Col>\n          <Button\n            variant=\"link\"\n            onClick={() => this.setState({ isSpreadMode: !isSpreadMode })}\n          >\n            {isSpreadMode ? (\n              <CloseCompletedTodoIcon />\n            ) : (\n              <OpenCompletedTodoIcon />\n            )}\n          </Button>\n          <Button disabled={true} variant=\"link\">\n            Completed Todo\n          </Button>\n        </Col>\n      );\n  };\n\n  countCompletedTodo = (todoList) => {\n    let completedTodoCount = 0;\n    for (const todo of todoList) {\n      if (todo.completed) {\n        completedTodoCount += 1;\n      }\n    }\n    return completedTodoCount;\n  };\n\n  renderCompletedTodo = (todoList, isSpreadMode) => {\n    if (isSpreadMode && todoList.length > 0) {\n      if (this.countCompletedTodo(todoList) === 0) {\n        return (\n          <Alert className=\"todo-list-container__alert\">\n            <InfoIcon className=\"todo-list-container__info-icon\" />\n            none\n          </Alert>\n        );\n      } else {\n        return (\n          <Col>\n            <ListGroup>\n              {todoList.map((todo, index) =>\n                todo.completed ? (\n                  <ListGroup.Item className=\"todo-list-container__list-group-item todo-list-container__completed-list-group-item\">\n                    <TodoEntry key={index} index={index} todo={todo} />\n                  </ListGroup.Item>\n                ) : null,\n              )}\n            </ListGroup>\n          </Col>\n        );\n      }\n    }\n  };\n\n  render() {\n    const {\n      props: { groupList, selectedGroupIndex },\n      state: { isAddMode, isSpreadMode },\n    } = this;\n    const selectedGroup = groupList[selectedGroupIndex];\n    const todoList = selectedGroup.todoList;\n\n    return (\n      <Container\n        fluid\n        className=\"todo-list-container\"\n        ref={this.todoListContainer}\n      >\n        <Row noGutters={true}>\n          <Button\n            variant=\"outline-dark\"\n            className=\"todo-list-container__add-button\"\n            onClick={() => this.setState({ isAddMode: !isAddMode })}\n          >\n            {isAddMode ? 'End' : '+'}\n          </Button>\n        </Row>\n        <Row noGutters={true}>{this.renderListOrInput(todoList)}</Row>\n        <Row noGutters={true} className=\"todo-list-container__completed-list\">\n          {this.renderCompletedTodoSpreadButton(todoList, isSpreadMode)}\n        </Row>\n        <Row noGutters={true}>\n          {this.renderCompletedTodo(todoList, isSpreadMode)}\n        </Row>\n        {this.showAlert()}\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = ({ groupList, selectedGroupIndex }) => ({\n  groupList,\n  selectedGroupIndex,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchAddTodo: (content) => dispatch(Action.addTodo(content)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Action from './redux/action';\nimport GroupList from './component/GroupList';\nimport TodoList from './component/TodoList';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './css/App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.dispatchGetGroupList();\n  }\n\n  renderTodoList = () => {\n    if (this.props.selectedGroupIndex !== null) {\n      return <TodoList />;\n    }\n  };\n\n  render() {\n    return (\n      <Container fluid className=\"app-container\">\n        <Row noGutters={true} className=\"app-container__wrapper flex-nowrap\">\n          <Col xl={4}>\n            <GroupList />\n          </Col>\n          <Col xl={8}>{this.renderTodoList()}</Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = ({ selectedGroupIndex }) => ({ selectedGroupIndex });\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchGetGroupList: () => dispatch(Action.getGroupList()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './redux/reducer';\nimport App from './App';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}